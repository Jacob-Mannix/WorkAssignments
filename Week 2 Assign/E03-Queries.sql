-- Drop existing tables if they exist
DROP TABLE IF EXISTS order_items;
DROP TABLE IF EXISTS orders;
DROP TABLE IF EXISTS customers;
DROP TABLE IF EXISTS products;
DROP TABLE IF EXISTS categories;
DROP TABLE IF EXISTS departments;
GO


Use retail_db;
GO

-- Validate data in departments table
SELECT TOP 10 * FROM departments;
GO
-- Validate data in categories table
SELECT TOP 10 * FROM categories;
GO
-- Validate data in products table
SELECT TOP 10 * FROM products;
GO
-- Validate data in customers table
SELECT TOP 10 * FROM customers;
GO
-- Validate data in orders table
SELECT TOP 10 * FROM orders;
GO
-- Validate data in order_items table
SELECT TOP 10 * FROM order_items;
GO


--Exercise 1 - Customer order cout

-- Get order count per customer for January 2014
SELECT 
    c.customer_id, 
    c.customer_fname AS customer_first_name, 
    c.customer_lname AS customer_last_name, 
    COUNT(o.order_id) AS customer_order_count
FROM 
    orders o
JOIN 
    customers c ON o.order_customer_id = c.customer_id
WHERE 
    FORMAT(order_date, 'yyyy-MM') LIKE '2014-01%'
GROUP BY 
    c.customer_id, c.customer_fname, c.customer_lname
ORDER BY 
    customer_order_count DESC, c.customer_id ASC;
GO




--Exercise 2 - Dormant Customers
-- Get the customer details who have not placed any order for January 2014
SELECT
	c.*
FROM
	customers c
LEFT JOIN
	orders o ON c.customer_id = o.order_customer_id
	AND FORMAT(o.order_date, 'yyyy-MM') = '2014-01'
WHERE
	o.order_id IS NULL
ORDER BY
	c.customer_id ASC;
GO




--Excercise 3 - Revenue Per Customer
-- Get the revenue generated by each customer for January 2014
SELECT 
    c.customer_id, 
    c.customer_fname AS customer_first_name, 
    c.customer_lname AS customer_last_name, 
    COALESCE(SUM(oi.order_item_subtotal), 0) AS customer_revenue
FROM 
    customers c
LEFT JOIN 
    orders o ON c.customer_id = o.order_customer_id 
    AND o.order_date BETWEEN '2014-01-01' AND '2014-01-31 23:59:59'
    AND o.order_status IN ('COMPLETE', 'CLOSED')
LEFT JOIN 
    order_items oi ON o.order_id = oi.order_item_order_id
GROUP BY 
    c.customer_id, c.customer_fname, c.customer_lname
ORDER BY 
    customer_revenue DESC, c.customer_id ASC;
GO




-- Exercise 4 - Revenue Per Category
-- Get the revenue generated for each category for January 2014
SELECT 
    cat.category_id, 
    cat.category_department_id, 
    cat.category_name, 
    COALESCE(SUM(oi.order_item_subtotal), 0) AS category_revenue
FROM 
    categories cat
JOIN 
    products p ON cat.category_id = p.product_category_id
JOIN 
    order_items oi ON p.product_id = oi.order_item_product_id
JOIN 
    orders o ON oi.order_item_order_id = o.order_id
WHERE 
    o.order_date BETWEEN '2014-01-01' AND '2014-01-31 23:59:59'
    AND o.order_status IN ('COMPLETE', 'CLOSED')
GROUP BY 
    cat.category_id, cat.category_department_id, cat.category_name
ORDER BY 
    cat.category_id ASC;
GO




--Exercise 5 - Product Count Per Department
-- Get the product count for each department
SELECT 
    d.department_id,
    d.department_name,
    COUNT(p.product_id) AS product_count
FROM 
    departments d
JOIN 
    categories c ON d.department_id = c.category_department_id
JOIN 
    products p ON c.category_id = p.product_category_id
GROUP BY 
    d.department_id, d.department_name
ORDER BY 
    d.department_id ASC;
GO